// È¶ñÂÖàÂä†ËΩΩÁéØÂ¢ÉÂèòÈáè
import dotenv from 'dotenv'
dotenv.config({ path: '.env' })

// Ë∞ÉËØïÁéØÂ¢ÉÂèòÈáè
console.log('üîß ÁéØÂ¢ÉÂèòÈáèÊ£ÄÊü•:', {
  DB_HOST: process.env.DB_HOST,
  DB_PORT: process.env.DB_PORT,
  DB_USER: process.env.DB_USER,
  DB_PASSWORD: process.env.DB_PASSWORD ? '***Â∑≤ËÆæÁΩÆ***' : 'Êú™ËÆæÁΩÆ',
  DB_NAME: process.env.DB_NAME
})

// ÁÑ∂ÂêéÂØºÂÖ•ÂÖ∂‰ªñÊ®°Âùó
import express from 'express'
import cors from 'cors'
import axios from 'axios'
import { databaseManager } from './database/DatabaseManager'
import enhancedPoemsRouter from './routes/enhanced-poems'
import aiRouter from './routes/ai'

const app = express()
const PORT = process.env.PORT || 5000
const N8N_URL = process.env.N8N_URL || 'http://localhost:5678'

// ‰∏≠Èó¥‰ª∂
app.use(cors({
  origin: [
    'http://localhost:3000', 
    'http://localhost:3001',
    process.env.FRONTEND_URL || 'http://localhost:3000'
  ],
  credentials: true
}))
app.use(express.json())

// ÂàùÂßãÂåñÊï∞ÊçÆÂ∫ì
async function initializeDatabase() {
  try {
    await databaseManager.initialize()
    console.log('‚úÖ MySQLÊï∞ÊçÆÂ∫ìËøûÊé•ÊàêÂäü')
  } catch (error) {
    console.error('‚ùå MySQLÊï∞ÊçÆÂ∫ìËøûÊé•Â§±Ë¥•:', error)
    process.exit(1)
  }
}

// Âü∫Á°ÄË∑ØÁî±
app.get('/api/health', (req, res) => {
  res.json({
    status: 'ok',
    message: 'Âè§ËØóÊñáÂ≠¶‰π†Âπ≥Âè∞ÂêéÁ´ØÊúçÂä°ËøêË°åÊ≠£Â∏∏ (MySQLÁâàÊú¨)',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    database: 'MySQL',
    features: [
      '‰∏≠ÂõΩAIÊúçÂä°‰ºòÂÖà',
      'Êô∫ËÉΩÊ≠£ËØØÂà§Êñ≠',
      'ÂõæÁâáÁºìÂ≠òÁ≥ªÁªü', 
      'ÂõæÁâáÈÖçÊñáÁîüÊàê',
      'ÊòüÁ∫ßËØÑÂàÜÊú∫Âà∂'
    ]
  })
})

// ‰ΩøÁî®Â¢ûÂº∫ÁöÑËØóËØçË∑ØÁî±
app.use('/api', enhancedPoemsRouter)

// ‰ΩøÁî®AIÊúçÂä°Ë∑ØÁî±
app.use('/api/ai', aiRouter)

// ‰øùÁïôÂéüÊúâÁöÑÂÖºÂÆπÊÄßË∑ØÁî±
// Ê®°ÊãüËØóËØçÊï∞ÊçÆ
const mockPoems = [
  {
    id: 'chunxiao',
    title: 'Êò•Êôì',
    author: 'Â≠üÊµ©ÁÑ∂',
    dynasty: 'Âîê',
    content: ['Êò•Áú†‰∏çËßâÊôì', 'Â§ÑÂ§ÑÈóªÂïºÈ∏ü', 'Â§úÊù•È£éÈõ®Â£∞', 'Ëä±ËêΩÁü•Â§öÂ∞ë'],
    difficulty: 'easy',
    tags: ['Êò•Â§©', 'ÂÜôÊôØ', 'ÊÉúÊò•'],
    translation: 'Êò•Â§©Áù°Ëßâ‰∏çÁü•‰∏çËßâÂ§©Â∑≤‰∫ÆÔºåÂà∞Â§ÑÈÉΩÂê¨Âà∞È∏üÂÑøÁöÑÂïºÈ∏£Â£∞„ÄÇÂõûÊÉ≥Êò®Â§úÁöÑÈ£éÈõ®Â£∞Ôºå‰∏çÁü•ÈÅìÊúâÂ§öÂ∞ëËä±ÊúµË¢´ÂêπËêΩ‰∫Ü„ÄÇ',
    appreciation: 'ËøôÈ¶ñËØóÈÄöËøáÊò•Êô®ÁöÑÊâÄËßÅÊâÄÈóªÔºåË°®Ëææ‰∫ÜËØó‰∫∫ÂØπÊò•ÂÖâÁöÑÁèçÊÉúÂíåÂØπËá™ÁÑ∂ÁöÑÁÉ≠Áà±„ÄÇ'
  },
  {
    id: 'jingye',
    title: 'ÈùôÂ§úÊÄù',
    author: 'ÊùéÁôΩ',
    dynasty: 'Âîê',
    content: ['Â∫äÂâçÊòéÊúàÂÖâ', 'ÁñëÊòØÂú∞‰∏äÈúú', '‰∏æÂ§¥ÊúõÊòéÊúà', '‰ΩéÂ§¥ÊÄùÊïÖ‰π°'],
    difficulty: 'easy',
    tags: ['ÊÄù‰π°', 'ÊúàÂ§ú', 'ÊäíÊÉÖ'],
    translation: 'Êòé‰∫ÆÁöÑÊúàÂÖâÊ¥íÂú®Â∫äÂâçÔºåÂÉèÊòØÂú∞‰∏äÁªì‰∫Ü‰∏ÄÂ±ÇÈúú„ÄÇÊä¨Â§¥ÊúõÂêëÂ§©Á©∫ÁöÑÊòéÊúàÔºå‰ΩéÂ§¥ÊÄùÂøµËøúÊñπÁöÑÊïÖ‰π°„ÄÇ',
    appreciation: 'ÊùéÁôΩÁî®ÁÆÄÊ¥ÅÁöÑËØ≠Ë®ÄÊèèÁªò‰∫ÜÊúàÂ§úÊÄù‰π°ÁöÑÊÉÖÊôØÔºåË°®Ëææ‰∫ÜÊ∏∏Â≠êÂØπÊïÖ‰π°Ê∑±ÂàáÁöÑÊÄùÂøµ‰πãÊÉÖ„ÄÇ'
  },
  {
    id: 'dengque',
    title: 'ÁôªÈπ≥ÈõÄÊ•º',
    author: 'Áéã‰πãÊ∂£',
    dynasty: 'Âîê',
    content: ['ÁôΩÊó•‰æùÂ±±Â∞Ω', 'ÈªÑÊ≤≥ÂÖ•Êµ∑ÊµÅ', 'Ê¨≤Á©∑ÂçÉÈáåÁõÆ', 'Êõ¥‰∏ä‰∏ÄÂ±ÇÊ•º'],
    difficulty: 'medium',
    tags: ['ÁôªÈ´ò', 'Âì≤ÁêÜ', 'Âä±Âøó'],
    translation: 'Â§ïÈò≥‰æùÂÇçÁùÄË•øÂ±±ÊÖ¢ÊÖ¢Ê≤âÊ≤°ÔºåÊªîÊªîÈªÑÊ≤≥ÊúùÁùÄ‰∏úÊµ∑Ê±πÊ∂åÂ•îÊµÅ„ÄÇËã•ÊÉ≥ÊääÂçÉÈáåÁöÑÈ£éÂÖâÊôØÁâ©ÁúãÂ§üÔºåÈÇ£Â∞±Ë¶ÅÁôª‰∏äÊõ¥È´òÁöÑ‰∏ÄÂ±ÇÂüéÊ•º„ÄÇ',
    appreciation: 'ËøôÈ¶ñËØóÂÄüÁôªÊ•ºËøúÊúõÁöÑÁªèÂéÜÔºåÊè≠Á§∫‰∫Ü"Á´ôÂæóÈ´òÔºåÁúãÂæóËøú"ÁöÑÂì≤ÁêÜÔºåÊàê‰∏∫ÂçÉÂè§‰º†ËØµÁöÑÂêçÂè•„ÄÇ'
  },
  {
    id: 'liangzhou',
    title: 'ÂáâÂ∑ûËØç',
    author: 'ÁéãÁø∞',
    dynasty: 'Âîê',
    content: ['Ëë°ËêÑÁæéÈÖíÂ§úÂÖâÊùØ', 'Ê¨≤È•ÆÁêµÁê∂È©¨‰∏äÂÇ¨', 'ÈÜâÂçßÊ≤ôÂú∫ÂêõËé´Á¨ë', 'Âè§Êù•ÂæÅÊàòÂá†‰∫∫Âõû'],
    difficulty: 'medium',
    tags: ['ËæπÂ°û', 'Ë±™Êîæ', 'Êàò‰∫â'],
    translation: 'Êñ∞ÈÖøÁöÑËë°ËêÑÁæéÈÖíÔºåÁõõÊª°Â§úÂÖâÊùØÔºõÊ≠£ÊÉ≥ÂºÄÊÄÄÁïÖÈ•ÆÔºåÈ©¨‰∏äÁêµÁê∂Â£∞È¢ëÂÇ¨„ÄÇÂç≥‰ΩøÈÜâÂÄíÊ≤ôÂú∫ÔºåËØ∑Âêõ‰∏çË¶ÅËßÅÁ¨ëÔºõËá™Âè§Áî∑ÂÑøÂá∫ÂæÅÔºåÊúâÂá†‰∫∫Ê¥ªÁùÄÂΩíÂõûÔºü',
    appreciation: 'ËøôÈ¶ñËØóÊèèÂÜô‰∫ÜËæπÂ°ûÂ∞ÜÂ£´ÁöÑË±™ËøàÊ∞îÊ¶ÇÔºåË°®Áé∞‰∫Ü‰ªñ‰ª¨ËßÜÊ≠ªÂ¶ÇÂΩíÁöÑËã±ÈõÑ‰∏ª‰πâÁ≤æÁ•û„ÄÇ'
  },
  {
    id: 'chibi',
    title: 'Ëµ§Â£Å',
    author: 'ÊùúÁâß',
    dynasty: 'Âîê',
    content: ['ÊäòÊàüÊ≤âÊ≤ôÈìÅÊú™ÈîÄ', 'Ëá™Â∞ÜÁ£®Ê¥óËÆ§ÂâçÊúù', '‰∏úÈ£é‰∏ç‰∏éÂë®ÈÉé‰æø', 'ÈìúÈõÄÊò•Ê∑±ÈîÅ‰∫å‰πî'],
    difficulty: 'hard',
    tags: ['ÂíèÂè≤', 'ÊÄÄÂè§', 'ËÆÆËÆ∫'],
    translation: 'ÊäòÊñ≠ÁöÑÊàüÊ≤âÊ≤°Âú®Ê≤ô‰∏≠ÈìÅË¥®‰ªçÊú™ÈîàËöÄÔºåËá™Â∑±Â∞ÜÂÆÉÁ£®Ê¥óÂêéËÆ§Âá∫ÊòØÂâçÊúùÈÅóÁâ©„ÄÇÂ¶ÇÊûú‰∏úÈ£é‰∏çÁªôÂë®Áëú‰ª•Êñπ‰æøÔºåÈìúÈõÄÂè∞Â∞±‰ºöÊ∑±Ê∑±Âú∞ÈîÅ‰ΩèÂ§ß‰πîÂ∞è‰πî‰∫Ü„ÄÇ',
    appreciation: 'ËØó‰∫∫ÈÄöËøáËµ§Â£Å‰πãÊàòÁöÑÂè≤ÂÆûÔºåÊÑüÂèπÂéÜÂè≤ÁöÑÂÅ∂ÁÑ∂ÊÄßÔºå‰ΩìÁé∞‰∫ÜÂØπËã±ÈõÑ‰∫∫Áâ©ÁöÑÊôØ‰ª∞„ÄÇ'
  },
  {
    id: 'wanglushan',
    title: 'ÊúõÂ∫êÂ±±ÁÄëÂ∏É',
    author: 'ÊùéÁôΩ',
    dynasty: 'Âîê',
    content: ['Êó•ÁÖßÈ¶ôÁÇâÁîüÁ¥´ÁÉü', 'ÈÅ•ÁúãÁÄëÂ∏ÉÊåÇÂâçÂ∑ù', 'È£ûÊµÅÁõ¥‰∏ã‰∏âÂçÉÂ∞∫', 'ÁñëÊòØÈì∂Ê≤≥ËêΩ‰πùÂ§©'],
    difficulty: 'medium',
    tags: ['ÂÜôÊôØ', 'ÁÄëÂ∏É', 'ÊÉ≥Ë±°'],
    translation: 'Èò≥ÂÖâÁÖßÂ∞ÑÈ¶ôÁÇâÂ≥∞ÁîüÂá∫Ë¢ÖË¢ÖÁ¥´ÁÉüÔºåËøúËøúÊúõÂéªÁÄëÂ∏ÉÂÉèÁôΩÁªÉÊåÇÂú®Â±±Ââç„ÄÇÊ∞¥ÊµÅÈ£ûÊ≥ªÁõ¥‰∏ã‰∏âÂçÉÂ∞∫ÔºåÂ•ΩÂÉèÊòØÈì∂Ê≤≥‰ªé‰πùÂ§©ÂûÇËêΩ‰∫∫Èó¥„ÄÇ',
    appreciation: 'ÊùéÁôΩËøêÁî®‰∏∞ÂØåÁöÑÊÉ≥Ë±°ÂíåÂ§∏Âº†ÁöÑÊâãÊ≥ïÔºåÁîüÂä®Âú∞ÊèèÁªò‰∫ÜÂ∫êÂ±±ÁÄëÂ∏ÉÁöÑÂ£ÆËßÇÊôØË±°„ÄÇ'
  },
  {
    id: 'dushushanfang',
    title: 'ËØª‰π¶Â±±Êàø',
    author: 'ÁøÅÊ£Æ',
    dynasty: 'Êòé',
    content: ['ËØª‰π¶ÂàáÊàíÂú®ÊÖåÂøô', 'Ê∂µÊ≥≥Â∑•Â§´ÂÖ¥Âë≥Èïø', 'Êú™Êôì‰∏çÂ¶®ÊùÉÊîæËøá', 'ÂàáË∫´È°ªË¶ÅÊÄ•ÊÄùÈáè'],
    difficulty: 'hard',
    tags: ['ËØª‰π¶', 'Ê≤ªÂ≠¶', 'Âì≤ÁêÜ'],
    translation: 'ËØª‰π¶ÊúÄÂøåËÆ≥ÁöÑÊòØÂåÜÂøôÊÄ•Ë∫ÅÔºåÁªÜÂøÉÊ∂µÂÖªÁöÑÂäüÂ§´ËÉΩËÆ©ÂÖ¥Ë∂£ÊåÅ‰πÖ„ÄÇ‰∏çÊòéÁôΩÁöÑÂú∞Êñπ‰∏çÂ¶®ÊöÇÊó∂ÊîæËøáÔºåÂàáË∫´Áõ∏ÂÖ≥ÁöÑÈóÆÈ¢òÂøÖÈ°ªËÆ§ÁúüÊÄùËÄÉ„ÄÇ',
    appreciation: 'ËøôÈ¶ñËØóÈòêËø∞‰∫ÜËØª‰π¶Ê≤ªÂ≠¶ÁöÑÊñπÊ≥ïÔºåÂº∫Ë∞ÉË¶ÅÁªÜÂøÉÊ∂µÂÖªÔºå‰∏çÂèØÊÄ•Ë∫ÅÔºå‰ΩìÁé∞‰∫ÜÂè§‰∫∫Ê≤ªÂ≠¶ÁöÑÊô∫ÊÖß„ÄÇ'
  },
  {
    id: 'shanxing',
    title: 'Â±±Ë°å',
    author: 'ÊùúÁâß',
    dynasty: 'Âîê',
    content: ['Ëøú‰∏äÂØíÂ±±Áü≥ÂæÑÊñú', 'ÁôΩ‰∫ëÊ∑±Â§ÑÊúâ‰∫∫ÂÆ∂', 'ÂÅúËΩ¶ÂùêÁà±Êû´ÊûóÊôö', 'ÈúúÂè∂Á∫¢‰∫é‰∫åÊúàËä±'],
    difficulty: 'easy',
    tags: ['ÁßãÊôØ', 'ÂÜôÊôØ', 'ÊäíÊÉÖ'],
    translation: 'Ê≤øÁùÄÂºØÂºØÊõ≤Êõ≤ÁöÑÂ∞èË∑Ø‰∏äÂ±±ÔºåÂú®ÈÇ£ÁôΩ‰∫ëÊ∑±Â§ÑÔºåËøò‰ΩèÁùÄÂá†Êà∑‰∫∫ÂÆ∂„ÄÇÂÅú‰∏ãËΩ¶Êù•ÔºåÊòØÂõ†‰∏∫ÂñúÁà±ËøôÊ∑±ÁßãÊû´ÊûóÊôöÊôØ„ÄÇÈúúÂè∂Á∫¢Ëâ≥ÔºåËÉúËøá‰∫åÊúàÊò•Ëä±„ÄÇ',
    appreciation: 'ËØó‰∫∫ÈÄöËøáÂØπÁßãÂ±±Á∫¢Âè∂ÁöÑÊèèÁªòÔºåË°®Ëææ‰∫ÜÂØπÂ§ßËá™ÁÑ∂ÁæéÊôØÁöÑËµûÁæéÂíåÁÉ≠Áà±‰πãÊÉÖ„ÄÇ'
  },
  {
    id: 'ailianshuopian',
    title: 'Áà±Ëé≤ËØ¥(ËäÇÈÄâ)',
    author: 'Âë®Êï¶È¢ê',
    dynasty: 'ÂÆã',
    content: ['Ê∞¥ÈôÜËçâÊú®‰πãËä±', 'ÂèØÁà±ËÄÖÁîöËïÉ', 'ÊôãÈô∂Ê∏äÊòéÁã¨Áà±Ëèä', 'Ëá™ÊùéÂîêÊù•‰∏ñ‰∫∫ÁîöÁà±Áâ°‰∏π', '‰∫àÁã¨Áà±Ëé≤‰πãÂá∫Ê∑§Ê≥•ËÄå‰∏çÊüì', 'ÊøØÊ∏ÖÊ∂üËÄå‰∏çÂ¶ñ'],
    difficulty: 'hard',
    tags: ['ÂíèÁâ©', 'Âì≤ÁêÜ', 'ÂìÅÂæ∑'],
    translation: 'Ê∞¥‰∏ä„ÄÅÈôÜÂú∞‰∏äÂêÑÁßçËçâÊú¨Êú®Êú¨ÁöÑËä±ÔºåÂÄºÂæóÂñúÁà±ÁöÑÂæàÂ§ö„ÄÇÊôã‰ª£ÁöÑÈô∂Ê∏äÊòéÂîØÁã¨ÂñúÁà±ËèäËä±„ÄÇ‰ªéÊùéÊ∞èÂîêÊúù‰ª•Êù•Ôºå‰∏ñ‰∫∫Â§ßÂ§öÂñúÁà±Áâ°‰∏π„ÄÇÊàëÂîØÁã¨ÂñúÁà±Ëé≤Ëä±‰ªéÊ±°Ê≥•‰∏≠ÈïøÂá∫Êù•ÔºåÂç¥‰∏çË¢´Ê±°Êüì„ÄÇ',
    appreciation: 'ÈÄöËøáÂØπËé≤Ëä±ÂìÅÊ†ºÁöÑËµûÁæéÔºåË°®Ëææ‰∫Ü‰ΩúËÄÖ‰∏çÂêåÊµÅ‰øó„ÄÅÊ¥ÅË∫´Ëá™Â•ΩÁöÑÂìÅÊ†ºËøΩÊ±Ç„ÄÇ'
  }
]

// Ê®°ÊãüËØóËØçÊé•Âè£
app.get('/api/poems', (req, res) => {
  const { difficulty, dynasty, tag, page = 1, limit = 10 } = req.query
  let filteredPoems = [...mockPoems]
  
  // Ê†πÊçÆÈöæÂ∫¶Á≠õÈÄâ
  if (difficulty) {
    filteredPoems = filteredPoems.filter(poem => poem.difficulty === difficulty)
  }
  
  // Ê†πÊçÆÊúù‰ª£Á≠õÈÄâ
  if (dynasty) {
    filteredPoems = filteredPoems.filter(poem => poem.dynasty === dynasty)
  }
  
  // Ê†πÊçÆÊ†áÁ≠æÁ≠õÈÄâ
  if (tag) {
    filteredPoems = filteredPoems.filter(poem => poem.tags.includes(tag as string))
  }
  
  // ÂàÜÈ°µ
  const startIndex = (Number(page) - 1) * Number(limit)
  const endIndex = startIndex + Number(limit)
  const paginatedPoems = filteredPoems.slice(startIndex, endIndex)
  
  res.json({
    success: true,
    data: paginatedPoems,
    total: filteredPoems.length,
    page: Number(page),
    limit: Number(limit)
  })
})

app.get('/api/poems/:id', (req, res) => {
  const poem = mockPoems.find(p => p.id === req.params.id)
  if (poem) {
    res.json({
      success: true,
      data: poem
    })
  } else {
    res.status(404).json({
      success: false,
      error: 'ËØóËØç‰∏çÂ≠òÂú®'
    })
  }
})

// Ëé∑ÂèñËØóËØçÁªüËÆ°‰ø°ÊÅØ
app.get('/api/poems/stats/overview', (req, res) => {
  const totalPoems = mockPoems.length
  
  const difficultyStats = mockPoems.reduce((acc, poem) => {
    acc[poem.difficulty] = (acc[poem.difficulty] || 0) + 1
    return acc
  }, {} as Record<string, number>)
  
  const dynastyStats = mockPoems.reduce((acc, poem) => {
    acc[poem.dynasty] = (acc[poem.dynasty] || 0) + 1
    return acc
  }, {} as Record<string, number>)
  
  const allTags = mockPoems.flatMap(poem => poem.tags)
  const tagStats = allTags.reduce((acc, tag) => {
    acc[tag] = (acc[tag] || 0) + 1
    return acc
  }, {} as Record<string, number>)
  
  res.json({
    success: true,
    data: {
      totalPoems,
      difficultyStats,
      dynastyStats,
      tagStats
    }
  })
})

// ÊêúÁ¥¢Âª∫ËÆÆ
app.get('/api/poems/search/suggestions', (req, res) => {
  const { q } = req.query
  if (!q || (q as string).length < 1) {
    return res.json({ success: true, data: [] })
  }
  
  const query = (q as string).toLowerCase()
  const suggestions = mockPoems.filter(poem => 
    poem.title.toLowerCase().includes(query) ||
    poem.author.toLowerCase().includes(query) ||
    poem.content.some(line => line.toLowerCase().includes(query))
  ).slice(0, 5).map(poem => ({
    id: poem.id,
    title: poem.title,
    author: poem.author,
    dynasty: poem.dynasty
  }))
  
  return res.json({
    success: true,
    data: suggestions
  })
})

// ===== N8N ÈõÜÊàê API =====

// Ëß¶ÂèëAIËØóËØçÁîüÊàêÂ∑•‰ΩúÊµÅ
app.post('/api/n8n/generate-poem', async (req, res) => {
  try {
    const { theme, style, difficulty } = req.body
    
    // Ë∞ÉÁî®n8nÂ∑•‰ΩúÊµÅ
    const response = await axios.post(`${N8N_URL}/webhook/generate-poem`, {
      theme,
      style,
      difficulty
    })
    
    return res.json({
      success: true,
      data: response.data
    })
  } catch (error) {
    console.error('Ë∞ÉÁî®n8nÁîüÊàêËØóËØçÂ§±Ë¥•:', error)
    return res.status(500).json({
      success: false,
      error: 'ÁîüÊàêËØóËØçÂ§±Ë¥•ÔºåËØ∑Á®çÂêéÈáçËØï'
    })
  }
})

// Ëß¶ÂèëAIÂõæÁâáÁîüÊàêÂ∑•‰ΩúÊµÅ
app.post('/api/n8n/generate-image', async (req, res) => {
  try {
    const { poemId, description } = req.body
    
    const response = await axios.post(`${N8N_URL}/webhook/generate-image`, {
      poemId,
      description
    })
    
    return res.json({
      success: true,
      data: response.data
    })
  } catch (error) {
    console.error('Ë∞ÉÁî®n8nÁîüÊàêÂõæÁâáÂ§±Ë¥•:', error)
    return res.status(500).json({
      success: false,
      error: 'ÁîüÊàêÂõæÁâáÂ§±Ë¥•ÔºåËØ∑Á®çÂêéÈáçËØï'
    })
  }
})

// Â≠¶‰π†ËøõÂ∫¶ËøΩË∏™Â∑•‰ΩúÊµÅ
app.post('/api/n8n/track-progress', async (req, res) => {
  try {
    const { userId, poemId, action, score } = req.body
    
    const response = await axios.post(`${N8N_URL}/webhook/track-progress`, {
      userId,
      poemId,
      action,
      score,
      timestamp: new Date().toISOString()
    })
    
    return res.json({
      success: true,
      data: response.data
    })
  } catch (error) {
    console.error('Ë∞ÉÁî®n8nËøΩË∏™Â≠¶‰π†ËøõÂ∫¶Â§±Ë¥•:', error)
    return res.status(500).json({
      success: false,
      error: 'ËÆ∞ÂΩïÂ≠¶‰π†ËøõÂ∫¶Â§±Ë¥•'
    })
  }
})

// Ëé∑Âèñ‰∏™ÊÄßÂåñÊé®Ëçê
app.post('/api/n8n/get-recommendations', async (req, res) => {
  try {
    const { userId, preferences } = req.body
    
    const response = await axios.post(`${N8N_URL}/webhook/get-recommendations`, {
      userId,
      preferences
    })
    
    return res.json({
      success: true,
      data: response.data
    })
  } catch (error) {
    console.error('Ë∞ÉÁî®n8nËé∑ÂèñÊé®ËçêÂ§±Ë¥•:', error)
    // Â¶ÇÊûún8nÊúçÂä°‰∏çÂèØÁî®ÔºåËøîÂõûÂü∫‰∫éÊú¨Âú∞Êï∞ÊçÆÁöÑÊé®Ëçê
    const fallbackRecommendations = mockPoems
      .filter(poem => poem.difficulty === 'easy')
      .slice(0, 3)
    
    return res.json({
      success: true,
      data: {
        recommendations: fallbackRecommendations,
        source: 'fallback'
      }
    })
  }
})

// n8nÂ∑•‰ΩúÊµÅÁä∂ÊÄÅÊ£ÄÊü•
app.get('/api/n8n/status', async (req, res) => {
  try {
    // Â∞ùËØïËÆøÈóÆn8n‰∏ªÈ°µÈù¢Êù•Ê£ÄÊü•ÊúçÂä°Áä∂ÊÄÅ
    const response = await axios.get(`${N8N_URL}/`, { timeout: 3000 })
    if (response.status === 200) {
      return res.json({
        success: true,
        data: {
          status: 'connected',
          activeWorkflows: 0,
          version: 'n8nÊúçÂä°Ê≠£Â∏∏ËøêË°å'
        }
      })
    } else {
      throw new Error('n8nÊúçÂä°ÂìçÂ∫îÂºÇÂ∏∏')
    }
  } catch (error) {
    return res.json({
      success: false,
      data: {
        status: 'disconnected',
        error: 'n8nÊúçÂä°‰∏çÂèØÁî®'
      }
    })
  }
})

// Êô∫ËÉΩÂ≠¶‰π†Âä©ÊâãAPI
app.post('/api/n8n/learning-assistant', async (req, res) => {
  try {
    const { action, poemId, question, difficulty } = req.body
    
    const response = await axios.post(`${N8N_URL}/webhook/learning-assistant`, {
      action,
      poemId,
      question,
      difficulty,
      timestamp: new Date().toISOString()
    })
    
    return res.json({
      success: true,
      data: response.data
    })
  } catch (error) {
    // ÈôçÁ∫ßÊ®°ÂºèÔºöËøîÂõûÊ®°ÊãüÁöÑÂ≠¶‰π†Âä©ÊâãÂìçÂ∫î
    const mockResponse = {
      type: req.body.action || 'suggestion',
      suggestions: [
        'Â§öËØªÂá†ÈÅçÔºåÁêÜËß£ËØóÊÑè',
        'Êü•ÈòÖ‰ΩúËÄÖËÉåÊôØËµÑÊñô',
        'Ê≥®ÊÑèÂè§ÊñáÁöÑËØ≠Ë®ÄÁâπËâ≤',
        'ÁªìÂêàÊó∂‰ª£ËÉåÊôØÁêÜËß£'
      ],
      timestamp: new Date().toISOString()
    }
    
    return res.json({
      success: true,
      data: {
        source: 'fallback',
        ...mockResponse
      }
    })
  }
})

// Êô∫ËÉΩÊµãËØïËØÑ‰º∞API
app.post('/api/n8n/assessment', async (req, res) => {
  try {
    const { answers, poemId, testType } = req.body
    
    const response = await axios.post(`${N8N_URL}/webhook/assessment`, {
      answers,
      poemId,
      testType,
      timestamp: new Date().toISOString()
    })
    
    return res.json({
      success: true,
      data: response.data
    })
  } catch (error) {
    // ÈôçÁ∫ßÊ®°ÂºèÔºöÁÆÄÂçïËØÑÂàÜ
    const score = req.body.answers ? 
      Math.min(100, 60 + req.body.answers.length * 10) : 0
    
    const mockAssessment = {
      score: score,
      maxScore: 100,
      level: score >= 90 ? '‰ºòÁßÄ' : score >= 75 ? 'ËâØÂ•Ω' : score >= 60 ? 'ÂèäÊ†º' : 'ÈúÄË¶ÅÂä™Âäõ',
      feedback: ['ÁªßÁª≠Âä™ÂäõÂ≠¶‰π†'],
      recommendations: ['Â§öÁªÉ‰π†', 'Âä†Âº∫ÁêÜËß£'],
      timestamp: new Date().toISOString()
    }
    
    return res.json({
      success: true,
      data: {
        source: 'fallback',
        ...mockAssessment
      }
    })
  }
})

// ËøõÂ∫¶ÂàÜÊûêAPI
app.post('/api/n8n/progress-analytics', async (req, res) => {
  try {
    const { userId, timeRange, analysisType } = req.body
    
    const response = await axios.post(`${N8N_URL}/webhook/progress-analytics`, {
      userId,
      timeRange,
      analysisType,
      timestamp: new Date().toISOString()
    })
    
    return res.json({
      success: true,
      data: response.data
    })
  } catch (error) {
    // ÈôçÁ∫ßÊ®°ÂºèÔºöËøîÂõûÊ®°ÊãüÁöÑËøõÂ∫¶ÂàÜÊûê
    const mockProgress = {
      userId: req.body.userId,
      summary: {
        totalStudyTime: 1250,
        poemsStudied: 15,
        averageScore: 78,
        studyStreak: 12
      },
      trends: {
        scoresTrend: 'improving',
        efficiency: 'medium'
      },
      insights: ['Â≠¶‰π†ËøõÊ≠•ÊòéÊòæ'],
      recommendations: ['‰øùÊåÅÂΩìÂâçÂ≠¶‰π†ÊñπÊ≥ï'],
      timestamp: new Date().toISOString()
    }
    
    return res.json({
      success: true,
      data: {
        source: 'fallback',
        ...mockProgress
      }
    })
  }
})

// 404 Â§ÑÁêÜ
app.use('*', (req, res) => {
  res.status(404).json({
    error: 'API Á´ØÁÇπ‰∏çÂ≠òÂú®',
    path: req.originalUrl
  })
})

// ÂêØÂä®ÊúçÂä°Âô®
async function startServer() {
  await initializeDatabase()
  
  app.listen(PORT, () => {
    console.log(`üöÄ ÊúçÂä°Âô®ËøêË°åÂú® http://localhost:${PORT}`)
    console.log(`üìö API ÂÅ•Â∫∑Ê£ÄÊü•: http://localhost:${PORT}/api/health`)
    console.log(`üåç ÁéØÂ¢É: ${process.env.NODE_ENV || 'development'}`)
    console.log(`üíæ Êï∞ÊçÆÂ∫ì: MySQL`)
    console.log(`ü§ñ AIÊúçÂä°: ‰∏≠ÂõΩÂõΩÂÜÖAI‰ºòÂÖà`)
  })
}

// ‰ºòÈõÖÂÖ≥Èó≠Â§ÑÁêÜ
process.on('SIGINT', async () => {
  console.log('\nüì¥ Ê≠£Âú®ÂÖ≥Èó≠ÊúçÂä°Âô®...')
  await databaseManager.close()
  process.exit(0)
})

process.on('SIGTERM', async () => {
  console.log('\nüì¥ Ê≠£Âú®ÂÖ≥Èó≠ÊúçÂä°Âô®...')
  await databaseManager.close()
  process.exit(0)
})

startServer().catch(error => {
  console.error('‚ùå ÊúçÂä°Âô®ÂêØÂä®Â§±Ë¥•:', error)
  process.exit(1)
})

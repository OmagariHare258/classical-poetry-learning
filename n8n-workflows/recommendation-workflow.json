{
  "name": "诗词推荐工作流",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "get-recommendations",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-recommendations",
      "name": "推荐请求接收器",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "get-recommendations"
    },
    {
      "parameters": {
        "jsCode": "// 模拟AI推荐逻辑\nconst { userId, preferences } = $input.first().json;\n\n// 基础诗词数据\nconst poems = [\n  {\n    id: 'chunxiao',\n    title: '春晓',\n    author: '孟浩然',\n    dynasty: '唐',\n    difficulty: 'easy',\n    tags: ['春天', '写景', '惜春']\n  },\n  {\n    id: 'jingye', \n    title: '静夜思',\n    author: '李白',\n    dynasty: '唐',\n    difficulty: 'easy',\n    tags: ['思乡', '月夜', '抒情']\n  },\n  {\n    id: 'dengque',\n    title: '登鹳雀楼',\n    author: '王之涣',\n    dynasty: '唐',\n    difficulty: 'medium',\n    tags: ['登高', '哲理', '励志']\n  }\n];\n\n// 根据偏好筛选推荐\nlet recommendations = poems;\n\nif (preferences.difficulty) {\n  recommendations = recommendations.filter(p => p.difficulty === preferences.difficulty);\n}\n\nif (preferences.dynasty) {\n  recommendations = recommendations.filter(p => p.dynasty === preferences.dynasty);\n}\n\n// 返回推荐结果\nreturn [{\n  json: {\n    recommendations: recommendations.slice(0, 3),\n    source: 'n8n',\n    userId: userId,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "js-recommendation-logic",
      "name": "推荐算法处理",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "response-node",
      "name": "返回推荐结果",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [680, 300]
    }
  ],
  "connections": {
    "推荐请求接收器": {
      "main": [
        [
          {
            "node": "推荐算法处理",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "推荐算法处理": {
      "main": [
        [
          {
            "node": "返回推荐结果",
            "type": "main", 
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "versionId": "1"
}
